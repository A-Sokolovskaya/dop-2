{Реализовать деление большого числа на большое число (не обязательно нацело). 
Примечание: для выполнения этого задания необходимо реализовать рациональные и иррациональные большие числа}

program dop2;

type
  PNum = ^TNum;
  TNum = record
    digit: integer;
    next, prev: PNum;
  end;

procedure ToBigNum(n: integer; var head, tail: PNum);//представление числа в виде большого
var p: PNum;
begin
  head := nil;
  tail := nil;
  if n > 0 then
  begin
    New(head);
    head^.digit := n mod 10;
    head^.next := nil;
    head^.prev := nil;
    tail := head;
    n := n div 10;
  end;
  while n > 0 do
  begin
    New(p);
    p^.digit := n mod 10;
    p^.next := head;
    p^.prev := nil;
    head^.prev := p;
    head := p;
    n := n div 10;
  end;
end;

procedure Print(head: PNum);//вывод большого числа
begin
  if head = nil then
    Write(0)
  else
    while head <> nil do
    begin
      Write(head^.digit);
      head := head^.next;
    end;
end;

procedure Multiply(tail1: PNum; n: integer; var head2, tail2: PNum);//умножение числа (подсчёт 63! и 61!)
var carry: integer; 
    p: PNum;
begin
  carry := 0;
  head2 := nil;
  tail2 := nil;
  if n > 0 then
    while (tail1 <> nil) or (carry > 0) do
    begin
      New(p);
      p^.digit := carry;
      if tail1 <> nil then
      begin
        p^.digit := p^.digit + tail1^.digit * n;
        tail1 := tail1^.prev;
      end;
      carry := p^.digit div 10;
      p^.digit := p^.digit mod 10;
      p^.next := head2;
      p^.prev := nil;
      if head2 = nil then
        tail2 := p
      else
        head2^.prev := p;
      head2 := p;
    end;
end;


procedure vch(tail61, tail63: PNum; var head, tail: PNum);//Вычитание
var carry: integer;
    p: PNum;
begin
  carry := 0;
  while (tail63 <> nil) or (tail61 <> nil) or (carry > 0) do
  begin
    New(p);
    p^.digit := carry;
    if tail63 <> nil then
    begin
      p^.digit := p^.digit + tail63^.digit;
      tail63 := tail63^.prev;
    end;
    if tail61 <> nil then
    begin
      if p^.digit >= tail61^.digit then
      begin
        p^.digit := p^.digit - tail61^.digit;
        tail61 := tail61^.prev
      end
      else
      begin
        p^.digit := p^.digit + 10;
        p^.digit := p^.digit - tail61^.digit;
        tail61 := tail61^.prev;
        tail61^.digit := tail61^.digit + 1;
      end;
    end;
    carry := p^.digit div 10;
    p^.digit := p^.digit mod 10;
    p^.next := head;
    p^.prev := nil;
    if head = nil then
      tail := p
    else
      head^.prev := p;
    head := p;
  end;
end;



var
  : PNum;

begin
  
  
end.
